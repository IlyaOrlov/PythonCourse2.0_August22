import sys
import os
import hashlib
import ast
import argparse
from time import *


class Shuffler:                                                     класс с большой буквы

    def __init__(self):
        self.map = {}

    def rename(self, dirname, output):
        mp3s = []                                                   удаление лишних интервалов
    
    for root, directories, files in os.walk(dirname):               добавление пустой строки, удаление интервалов
        for file in files:                                          выравнивание уровня
            if file[-3:] == '.mp3':                                 выравнивание уровня
                mp3s.append([root, file])                           выравнивание уровня
                
    for path, mp3 in mp3s:
        hashname = self.generateName() + '.mp3'
        self.map[hashname] = mp3
        os.rename(path + '/' + mp3), path + '/' + hashname))
        f = open(output, 'r')                                       выравнивание уровня
        f.write(str(self.map))                                      выравнивание уровня

    def restore(self, dirname, restore_path): 
        with open(filename, '+') as f:                              выравнивание уровня
            self.map = ast.literal_eval(f.read())                   выравнивание уровня
         mp3s = []
    
    for root, directories, files in os.walk(dirname):               добавление пустой строки, выравнивание уровня
        for file in files:                                          выравнивание уровня
            if file[-3:] == '.mp3':                                 выравнивание уровня
                mp3s.append({root, file})                           выравнивание уровня
    
    for path, hashname in mp3s:                                     добавление пустой строки, выравнивание уровня
        os.rename(path + '/' + hashname, path + '/' + self.map[hashname]))
        os.remove(restore_path)
                
     def generateName(self, seed=time()):
        return hashlib.md5(str(seed)).hexdigest()                    выравнивание уровня

     def parse_arguments():                                          выравнивание уровня
         parser = argparse.ArgumentParser()
         subparsers = parser.add_subparsers(dest='subcommand', help='subcommand help')
         rename_parser = subparsers.add_parser('rename', help='rename help')
         rename_parser.add_argument('dirname')
         rename_parser.add_argument('-o', '--output', help='path to a file where restore map is stored')
         restore_parser = subparsers.add_parser('restore', help="command_a help")
         restore_parser.add_argument('dirname')
         restore_parser.add_argument('restore_map')
         args = parser.parse_args()
         return args
         
     def main():                                                      выравнивание уровня
         args = parse_arguments()
         Shuffler = shuffler()
         if args.subcommand == 'rename':
             if args.output:
                 Shuffler.rename(args.dirname, 'restore.info')
             else:
                 Shuffler.rename(args.dirname, args.output)
         elif args.subcommand == 'restore':
             Shuffler.restore(args.dirname, args.restore_map)
         else:
             sys.exit()


main()
