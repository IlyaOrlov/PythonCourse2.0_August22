# Часто задача программиста заключается в том, чтоб найти в документации готовую функцию,
# которая реализует необходимое решение. Данное задании предполагает самостоятельное изучение документации
# к библиотеке itertools (это набор готовых итераторов), чтобы подобрать те функции, которые дадут
# правильные ответы на указанные вопросы (иногда надо будет добавить свои аргументы при вызове функций помимо тех,
# что указаны в задании). Требуется написать код, который использует указанные входные данные и выводит на экран
# возвращаемое значение. Помните, что функции могут возвращать генератор, который нужно "развернуть" для вывода на экран.
# •Функция должна принимать три массива ([1, 2, 3], [4, 5], [6, 7]), а вернуть лишь один массив ([1, 2, 3, 4, 5, 6, 7])
# •Функция принимает массив (['hello', 'i', 'write', 'cool', 'code']) и возвращает массив из элементов, у которых длина не меньше пяти (['hello', 'write’])
# •Функция выдает на строку 'password' все возможные комбинации вида ([('p', 'a', 's', 's'), ('p', 'a', 's', 'w'), ('p', 'a', 's', 'o'), ...)
import itertools


def my_iter(*args):
    print(list(itertools.chain(*args)))

m1 = [1, 2, 3]
m2 = [4, 5]
m3 = [6, 7]
n = my_iter(m1, m2, m3)

def my_iter1(*args):
    print(list(itertools.filterfalse(lambda arg: len(arg) < 5, *args)))

n1 = ['hello', 'i', 'write', 'cool', 'code']
n2 = my_iter1(n1)

def my_iter2(*args):
    print(list(itertools.combinations(*args, 4)))

s = 'password'
s1 = my_iter2(s)

